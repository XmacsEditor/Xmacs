diff --git a/src/Graphics/Fonts/font.cpp b/src/Graphics/Fonts/font.cpp
index 53bf6dcdb..a3d680a54 100644
--- a/src/Graphics/Fonts/font.cpp
+++ b/src/Graphics/Fonts/font.cpp
@@ -591,17 +591,35 @@ default_chinese_font_name () {
 
 string
 default_japanese_font_name () {
+  // Set default Japanese font for macOS
+  // see: https://developer.apple.com/fonts/system-fonts/
+#ifdef OS_MACOS
+  if (tt_font_exists ("ヒラギノ角ゴシック W3")) return "Hiragino Kaku Gothic ProN";
+#endif
+
+#ifdef OS_MINGW
+  if (tt_font_exists ("msmincho")) return "MS PMincho";
+#endif
+
   if (tt_font_exists ("ipam")) return (new_fonts? "IPAMincho": "modern");
   if (tt_font_exists ("sazanami")) return "sazanami";
   if (tt_font_exists ("ttf-japanese-gothic")) return "ttf-japanese";
   if (tt_font_exists ("ヒラギノ明朝 ProN W6")) return "kaku";
-  if (tt_font_exists ("MS PGothic")) return "ms-gothic";
-  if (tt_font_exists ("MS PMincho")) return "ms-mincho";
   return "roman";  
 }
 
 string
 default_korean_font_name () {
+  // Set default Korean font for macOS
+  // see: https://developer.apple.com/fonts/system-fonts/
+#ifdef OS_MACOS
+  if (tt_font_exists ("AppleSDGothicNeo")) return "Apple SD Gothic Neo";
+#endif
+
+#ifdef OS_MINGW
+  if (tt_font_exists ("batang")) return "Batang";
+#endif
+
   if (tt_font_exists ("unbatang")) return (new_fonts? "UnBatang": "modern");
   if (tt_font_exists ("UnBatang")) return (new_fonts? "UnBatang": "modern");
   if (tt_font_exists ("AppleGothic")) return "apple-gothic";
diff --git a/src/Graphics/Fonts/font_translate.cpp b/src/Graphics/Fonts/font_translate.cpp
index 7d73c2702..7d0636834 100644
--- a/src/Graphics/Fonts/font_translate.cpp
+++ b/src/Graphics/Fonts/font_translate.cpp
@@ -157,8 +157,8 @@ upgrade_family_name (string f) {
     t ("modern")= "roman";
     t ("cyrillic")= "roman";
     t ("sys-chinese")= default_chinese_font_name ();
-    t ("sys-japanese")= "roman";
-    t ("sys-korean")= "roman";
+    t ("sys-japanese")= default_japanese_font_name ();
+    t ("sys-korean")= default_korean_font_name ();
   }
   if (t->contains (f)) return t[f];
   else return f;
diff --git a/src/Graphics/Fonts/smart_font.cpp b/src/Graphics/Fonts/smart_font.cpp
index ee2a6cb43..51e820568 100644
--- a/src/Graphics/Fonts/smart_font.cpp
+++ b/src/Graphics/Fonts/smart_font.cpp
@@ -464,6 +464,7 @@ get_unicode_range (int code) {
   else if (code >= 0x3000 && code <= 0x303f) return "cjk";
   else if (code >= 0x4e00 && code <= 0x9fcc) return "cjk";
   else if (code >= 0xff00 && code <= 0xffef) return "cjk";
+  else if (code >= 0x3040 && code <= 0x309F) return "hiragana";
   else if (code >= 0xac00 && code <= 0xd7af) return "hangul";
   else if (code >= 0x2000 && code <= 0x23ff) return "mathsymbols";
   else if (code >= 0x2900 && code <= 0x2e7f) return "mathextra";
@@ -482,6 +483,17 @@ get_unicode_range (string c) {
   return "";
 }
 
+bool
+in_cjk_range(string c) {
+  string uc= strict_cork_to_utf8 (c);
+  if (N(uc) == 0) return false;
+
+  int pos= 0;
+  int code= decode_from_utf8 (uc, pos);
+  string range= get_unicode_range (code);
+  return range == "cjk" || range == "hangul" || range == "hiragana";
+}
+
 bool
 in_unicode_range (string c, string range) {
   string uc= strict_cork_to_utf8 (c);
@@ -942,6 +954,12 @@ smart_font_rep::resolve (string c, string fam, int attempt) {
         if (wanted == "") ok= true;
         else if (contains (wanted, given)) ok= true;
         else if (in_unicode_range (c, wanted)) ok= true;
+        else if (in_cjk_range(c)) {
+          // For Korean charactors, its default family is `sys-korean`
+          // `sys-korean` is expanded to `cjk=Apple SD Gothic Neo,roman`
+          // There are actually two ranges (cjk/hangul) for Korean characters
+          ok= true;
+        }
         else if (wanted == substitute_math_letter (c, 2)) ok= true;
         else if (wanted == c) ok= true;
         else if (in_collection (c, wanted)) ok= true;
@@ -1256,8 +1274,8 @@ smart_font_rep::resolve (string c) {
   string virt= find_in_virtual (c);
   if (math_kind != 0 && !unicode_provides (c) && virt == "")
     if (!starts (c, "<left-") &&
-	!starts (c, "<right-") &&
-	!starts (c, "<mid-")) {
+        !starts (c, "<right-") &&
+        !starts (c, "<mid-")) {
       //cout << "Found " << c << " in other\n";
       return sm->add_char (tuple ("other"), c);
     }
